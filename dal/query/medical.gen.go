// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"box/dal/model"
)

func newMedical(db *gorm.DB) medical {
	_medical := medical{}

	_medical.medicalDo.UseDB(db)
	_medical.medicalDo.UseModel(&model.Medical{})

	tableName := _medical.medicalDo.TableName()
	_medical.ALL = field.NewField(tableName, "*")
	_medical.ID = field.NewInt64(tableName, "id")
	_medical.Height = field.NewFloat32(tableName, "height")
	_medical.Weight = field.NewFloat32(tableName, "weight")
	_medical.HeadCircumference = field.NewFloat32(tableName, "head_circumference")
	_medical.OperatorID = field.NewInt64(tableName, "operator_id")
	_medical.CreatedAt = field.NewInt64(tableName, "created_at")
	_medical.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_medical.DeletedAt = field.NewInt64(tableName, "deleted_at")

	_medical.fillFieldMap()

	return _medical
}

type medical struct {
	medicalDo medicalDo

	ALL               field.Field
	ID                field.Int64
	Height            field.Float32
	Weight            field.Float32
	HeadCircumference field.Float32
	OperatorID        field.Int64
	CreatedAt         field.Int64
	UpdatedAt         field.Int64
	DeletedAt         field.Int64

	fieldMap map[string]field.Expr
}

func (m medical) Table(newTableName string) *medical {
	m.medicalDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m medical) As(alias string) *medical {
	m.medicalDo.DO = *(m.medicalDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *medical) updateTableName(table string) *medical {
	m.ALL = field.NewField(table, "*")
	m.ID = field.NewInt64(table, "id")
	m.Height = field.NewFloat32(table, "height")
	m.Weight = field.NewFloat32(table, "weight")
	m.HeadCircumference = field.NewFloat32(table, "head_circumference")
	m.OperatorID = field.NewInt64(table, "operator_id")
	m.CreatedAt = field.NewInt64(table, "created_at")
	m.UpdatedAt = field.NewInt64(table, "updated_at")
	m.DeletedAt = field.NewInt64(table, "deleted_at")

	m.fillFieldMap()

	return m
}

func (m *medical) WithContext(ctx context.Context) *medicalDo { return m.medicalDo.WithContext(ctx) }

func (m medical) TableName() string { return m.medicalDo.TableName() }

func (m medical) Alias() string { return m.medicalDo.Alias() }

func (m *medical) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *medical) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 8)
	m.fieldMap["id"] = m.ID
	m.fieldMap["height"] = m.Height
	m.fieldMap["weight"] = m.Weight
	m.fieldMap["head_circumference"] = m.HeadCircumference
	m.fieldMap["operator_id"] = m.OperatorID
	m.fieldMap["created_at"] = m.CreatedAt
	m.fieldMap["updated_at"] = m.UpdatedAt
	m.fieldMap["deleted_at"] = m.DeletedAt
}

func (m medical) clone(db *gorm.DB) medical {
	m.medicalDo.ReplaceDB(db)
	return m
}

type medicalDo struct{ gen.DO }

func (m medicalDo) Debug() *medicalDo {
	return m.withDO(m.DO.Debug())
}

func (m medicalDo) WithContext(ctx context.Context) *medicalDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m medicalDo) ReadDB() *medicalDo {
	return m.Clauses(dbresolver.Read)
}

func (m medicalDo) WriteDB() *medicalDo {
	return m.Clauses(dbresolver.Write)
}

func (m medicalDo) Clauses(conds ...clause.Expression) *medicalDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m medicalDo) Returning(value interface{}, columns ...string) *medicalDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m medicalDo) Not(conds ...gen.Condition) *medicalDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m medicalDo) Or(conds ...gen.Condition) *medicalDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m medicalDo) Select(conds ...field.Expr) *medicalDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m medicalDo) Where(conds ...gen.Condition) *medicalDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m medicalDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *medicalDo {
	return m.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (m medicalDo) Order(conds ...field.Expr) *medicalDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m medicalDo) Distinct(cols ...field.Expr) *medicalDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m medicalDo) Omit(cols ...field.Expr) *medicalDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m medicalDo) Join(table schema.Tabler, on ...field.Expr) *medicalDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m medicalDo) LeftJoin(table schema.Tabler, on ...field.Expr) *medicalDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m medicalDo) RightJoin(table schema.Tabler, on ...field.Expr) *medicalDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m medicalDo) Group(cols ...field.Expr) *medicalDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m medicalDo) Having(conds ...gen.Condition) *medicalDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m medicalDo) Limit(limit int) *medicalDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m medicalDo) Offset(offset int) *medicalDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m medicalDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *medicalDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m medicalDo) Unscoped() *medicalDo {
	return m.withDO(m.DO.Unscoped())
}

func (m medicalDo) Create(values ...*model.Medical) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m medicalDo) CreateInBatches(values []*model.Medical, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m medicalDo) Save(values ...*model.Medical) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m medicalDo) First() (*model.Medical, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Medical), nil
	}
}

func (m medicalDo) Take() (*model.Medical, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Medical), nil
	}
}

func (m medicalDo) Last() (*model.Medical, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Medical), nil
	}
}

func (m medicalDo) Find() ([]*model.Medical, error) {
	result, err := m.DO.Find()
	return result.([]*model.Medical), err
}

func (m medicalDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Medical, err error) {
	buf := make([]*model.Medical, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m medicalDo) FindInBatches(result *[]*model.Medical, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m medicalDo) Attrs(attrs ...field.AssignExpr) *medicalDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m medicalDo) Assign(attrs ...field.AssignExpr) *medicalDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m medicalDo) Joins(fields ...field.RelationField) *medicalDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m medicalDo) Preload(fields ...field.RelationField) *medicalDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m medicalDo) FirstOrInit() (*model.Medical, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Medical), nil
	}
}

func (m medicalDo) FirstOrCreate() (*model.Medical, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Medical), nil
	}
}

func (m medicalDo) FindByPage(offset int, limit int) (result []*model.Medical, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m medicalDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m medicalDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m medicalDo) Delete(models ...*model.Medical) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *medicalDo) withDO(do gen.Dao) *medicalDo {
	m.DO = *do.(*gen.DO)
	return m
}
